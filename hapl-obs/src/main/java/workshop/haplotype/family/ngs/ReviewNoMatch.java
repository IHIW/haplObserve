/**
 * This class reviews a list that is generated by
 * IdenticalHLACountCheck
 * When the list contains "NoMatch", then check Two field match
 * If Two field matches are found, then the type is converted to have ambiguity
 * ChildType/ParentType or ParentType/ChildType
 */
package workshop.haplotype.family.ngs;

import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import workshop.haplotype.gene.MakeAmbiguityString;

/**
 * @author kazutoyo
 * @version April 28 2016
 *
 */
public class ReviewNoMatch {
	private String reviewedType;
	private List<String> linkedList;
	private boolean valid;


	/**
	 * list1: IdenticalHLACountCheck getList()
	 * list2: getHlaTypeBySample().get(child).get(gene)
	 * list3: getHlaTypeBySample().get(PARENT).get(gene)
	 */
	public ReviewNoMatch(String type, List<String> list2, List<String> list3) {	//List<String> list1
		// TODO Auto-generated constructor stub
		reviewedType = "";
		linkedList = new LinkedList<String>();
		valid = true;
		
		if (type.contains("NoMatch")) {		// exclude P1BothMatch	
			valid = false;
			Set<String> set = new TreeSet<String>();
			for (String childType : list2) {
				for (String paternalType : list3) {
					CheckTwoFieldMatch twoField = new CheckTwoFieldMatch(childType, paternalType);
					if (twoField.getResult()) {
						// if type contains ambiguity
						// child: HLA-DQB1*03:01:01:01/HLA-DQB1*03:01:01:03
						// father HLA-DQB1*03:01:01:03
						String [] clist = childType.split("/");
						for (String str : clist) {
							set.add(str);
						}
						
						String [] plist = paternalType.split("/");
						for (String str : plist) {
							set.add(str);
						}						
					}
				}
			}			
			linkedList.addAll(set);				
			MakeAmbiguityString mas = new MakeAmbiguityString(linkedList);
						
			if (mas.getAmbiguity().length() == 0) {
				reviewedType = "NoMatch";
			}
			else {
				reviewedType = mas.getAmbiguity();
			}
			
		}
		else {
			reviewedType = type;
		}
			
	}
	
	
	public String getReviewedType() {
		return reviewedType;
	}
	
	public List<String> getLinkedList() {
		return linkedList;
	}
	
	public boolean getValid() {
		return valid;
	}


}
