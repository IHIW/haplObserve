/**
 * add family, relationship and ethnicity/country information
 * in the table from HaplObserve
 * family + "_Validation_" + today + ".txt"
 * family + "_SingleAlleleHapType_" + today + ".txt"
 * family + "_TwoFieldAlleleHapType_" + today + ".txt"
 */
package workshop.haplotype.collective;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import workshop.haplotype.organize.file.ReadFileOrganizeInList;

/**
 * @author kazu
 * @version June 18 2018
 *
 */
public class AddFamRelationCountry {
	protected Map<String, String> sampleType;
	protected List<List<String>> famSamRelationHapCountry;
	protected final static String [] orderedRelation = {"child", "father", "mother"};
	

	/**
	 * @param filePath to files generated by HaplObserve
	 */
	public AddFamRelationCountry(String filePath, FamSamRelationCountry fsrc) {
		// TODO Auto-generated constructor stub
		ReadFileOrganizeInList rcsvf = new ReadFileOrganizeInList(filePath);
		famSamRelationHapCountry = new ArrayList<List<String>>();
		sampleType = new HashMap<String, String>();
		Map<String, Integer> sampleCount = new HashMap<String, Integer>();
		
		// CAPTURE VALIDATION, CAPTURE TRUE for parent
		for (String line : rcsvf.getOriginalList()) {	// haplotype line
//			System.out.println(line);
			String [] elements = line.split("\t");
			String sample = elements[0];			
			if (!fsrc.getSampleRelation().get(sample).equals("child")) {	// parents
				if (elements[1].equals("true")) {
					sampleType.put(sample, elements[2] + "," + elements[1]);		// haplotype, validation					
				}
				else {
					sampleCount.put(sample, 0);	
				}
			}
			else {	// child
				sampleType.put(sample, elements[2] + "," + elements[1]);			// haplotype
			}			
		}
		
		if (!sampleCount.isEmpty()) {	// parent false
			for (String sample : sampleCount.keySet()) {
				for (String line : rcsvf.getOriginalList()) {	// haplotype line
					String [] elements = line.split("\t");
					if (sample.equals(elements[0])) {
						sampleType.put(sample, elements[2] + "," + elements[1]);	// pick one of the false
					}					
				}				
			}			
		}		
		
		List<String> orderedSample = new ArrayList<String>();
		for (String relation : orderedRelation) {
			for (String sample : sampleType.keySet()) {
				if (fsrc.getSampleRelation().get(sample).equals(relation)) {
					orderedSample.add(sample);					
				}
			}			
		}
		
		for (String sample : orderedSample) {
			List<String> tmpList = new ArrayList<String>();
			tmpList.add(fsrc.getSampleFamily().get(sample));		// family
			tmpList.add(sample);	// sample
			tmpList.add(fsrc.getSampleRelation().get(sample));		// relation
//			tmpList.add(sampleType.get(sample));	// type, validation
			String [] hapValid = sampleType.get(sample).split(",");
			tmpList.add(hapValid[0]);
			tmpList.add(hapValid[1]);
			tmpList.add(fsrc.getSampleCountry().get(sample));	// country
			famSamRelationHapCountry.add(tmpList);
		}
				
	}
	
	public List<List<String>> getFamSamRelationHapCountry() {
		return famSamRelationHapCountry;
	}
}
